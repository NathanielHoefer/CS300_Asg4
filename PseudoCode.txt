/*****************************************************************************/
/* Program 4 - Linked List Class Creation									 */
/*****************************************************************************
    Author: Nathaniel Hoefer
    Student ID: X529U639
    Program: #4


Description of the Problem:
	For this program, you are going to modify the Node class that you wrote for 
	program #3 and implement a double linked list.  The node class will have the 
	same member functions as before with the addition of another link.  You will 
	now have a previous link (pointer) and a next link (pointer).  All of the 
	information will be written to a file.  Just as in the first program, you 
	are to check to see if the file exists.  If it does, open the file and 
	populate the list.  Otherwise, when the program exits, print the information 
	to a file.  Call the file “booklist.txt”.


Class Name: Node
	The inventory class contains only the members associated with the inventory
	which are part number, item, quantity, price, and total cost.

Data:		
		- (string) mBookTitle: The title of a book
		- (string) mAuthor: The author of the book
		- (int) mDateRead: contains numerical value of the date in the 
			format of MMDDYYYY
		- (Node) *mNextNode: Pointer to next node in list
		- (Node) *mPrevNode: Pointer to previous node in list

Constructors:	
		+ Node() - Sets the value to default
		+ Node(string title, string author, int date): creates node with the
			arguments passed
				
Mutator Functions:
		+ setNextPointer
		+ setPrevPointer
			
Accessor Functions:
		+ getNextPointer
		+ getPrevPointer
		+ getBookTitle
		+ getAuthor
			
Functions:
		+ CompareTitle(string title) - compare a given book title against the
			one in the class.
			Preconditions: None
			Postconditions: returns numeric value depending on the 
				lexigraphic ordering
			Returns: (int) -1 if title < mBookTitle, 0 if title == mBookTitle,
				1 if title > mBookTitle.
			> Compare string and return value based on result
			
		+ CompareAuthor(string author) - compare a given author against the
			one in the class.
			Preconditions: None
			Postconditions: returns numeric value depending on the 
				lexigraphic ordering
			Returns: (int) -1 if title < mAuthor, 0 if author == mAuthor,
				1 if author > mAuthor.
			> Compare string and return value based on result
			
		+ ProcessData() - Print the data to the screen
			Preconditions: None
			Postconditions: Data in node is printed to the screen
			> Print title
			> Print author
			> Print formatted date
	
Class Name: LinkedList
	This class initializes a unordered double linked list containing the information of
	a book, its author, and the date read within each node.

Data:
		- (Node) *mHead: Pointer to the Head of the list
		- (Node) *mTail: Pointer to the Tail of the list
		- (int) mCount: The number of nodes within the list

Constructors:
		+ LinkedList() - Creates an empty list

Mutator Functions:
		+ setHead
		+ setTail
		+ setCount

Accessor Functions:
		+ getHead
		+ getTail
		+ getCount
		+ isEmpty

Functions:
		+ Insert(string title, string author, string date) - create a new node
			at the end of the linked list with the arguments passed.
			Preconditions: Date must be in the format MM/DD/YYYY to be properly
				read.
			Postconditions: New node is appended at end of list, tail is updated
			> Create new node with info
			> Check to see if list is empty, if so, update tail and head to
				new node.
			> Else, change next pointer of node in tail to new node to link and
				update tail to new node
			> Increase count by 1

		+ Delete(string title) - Searches and deletes the node(s) with a given
			title.
			Preconditions: Title must be spelled exactly the same to be found.
			Postconditions: Node(s) is deleted if found and message displayed
			> Loop through every node in list
			> Compare the title given to title in node
			> If same, print data (ProcessData()) for all same titles
			> Verify that they are to be deleted
			> If yes, remove node, decrease count, and keep track of number
				of nodes deleted
			> If list now empty, update head and tail accordingly
			> Print result to screen

		+ Traverse(bool backwards) - Prints each node to the screen
			Precondition: None
			Postcondition: Nodes are printed to screen either forwards or
				backwards
			> Check if list is empty, and display message if so
			> If forwards, print using ProcessData() starting with the head node
			> If backwards, print using ProcessData() starting with tail node

		+ Retrieve(string title) - retrieves the nodes with the given title
			and prints info
			Precondition: None
			Postcondition: Book info is printed to screen
			> Checks to see if list is empty
			> Compare each node's title to the title given
			> Print the node's info if title matches	
	
	
Description of the Problem:
	For this program, you are going to modify the Node class that you wrote for
	program #3 and implement a double linked list.  The node class will have the
	same member functions as before with the addition of another link.  You will
	now have a previous link (pointer) and a next link (pointer).  All of the
	information will be written to a file.  Just as in the first program, you
	are to check to see if the file exists.  If it does, open the file and
	populate the list.  Otherwise, when the program exits, print the information
	to a file.  Call the file “booklist.txt”.

Functions:
	+ main() - Loads data from file to new linked list if applicable and then
		presents the user with a menu with 6 choices:
			1. Add a book
			2. Delete a book
			3. Retrieve a book
			4. Traverse list forward
			5. Traverse list backward
			6. Exit program
		Preconditions: If file booklist.txt exists, then it will be read
		Postconditions: booklist.txt is saved with new book info
		> Check to see if txt file exists and parses info into new linked list.
		> Present user with menu
		> Option 1: ask for new book info and use insert method to create node
		> Option 2: ask for title to delete and use delete method
		> Option 3: ask for title and use retrieve method
		> Option 4: Use the traverse method
		> Option 5: Use the traverse method backward version
		> Option 6: Save list in txt file and exit program
			
*/